#!/bin/bash

# ThyWill CLI - Git-style command-line utility for deployment and backup operations
# Usage: ./thywill <command> [options]
#
# IMPORTANT: This CLI script should ONLY be used as a dispatcher to run Python scripts.
# DO NOT add business logic, complex processing, or application-specific functionality here.
# All actual work should be delegated to Python modules in the app_helpers/ directory.
# This script exists purely to provide a clean command-line interface and should remain minimal.

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="$SCRIPT_DIR"
DEPLOYMENT_DIR="$APP_DIR/deployment"
BACKUP_DIR="$APP_DIR/backups"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

header() {
    echo -e "${BOLD}${CYAN}$1${NC}"
}

# Virtual environment activation function
ensure_venv() {
    # Check if we're already in a virtual environment
    if [ -n "${VIRTUAL_ENV:-}" ]; then
        return 0
    fi
    
    # Check if virtual environment exists
    if [ -d "venv" ]; then
        log "Activating virtual environment..."
        source venv/bin/activate
        return 0
    elif [ -d "$APP_DIR/venv" ]; then
        log "Activating virtual environment from $APP_DIR..."
        source "$APP_DIR/venv/bin/activate"
        return 0
    else
        warning "Virtual environment not found"
        echo "Please run: python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
        return 1
    fi
}

# Python execution wrapper that ensures venv is activated
run_python() {
    if ! ensure_venv; then
        error "Virtual environment activation failed"
        echo "Please ensure you have a working virtual environment:"
        echo "  python3 -m venv venv"
        echo "  source venv/bin/activate"
        echo "  pip install -r requirements.txt"
        exit 1
    fi
    python3 "$@"
}

# Help functions
show_help() {
    header "ThyWill CLI - Deployment and Backup Management"
    echo ""
    echo "USAGE:"
    echo "    thywill <command> [options]"
    echo ""
    echo "COMMANDS:"
    echo ""
    header "  Development Commands:"
    echo "    start [port]        Start local development server (default: 8000)"
    echo ""
    header "  Deployment Commands:"
    echo "    deploy              Deploy application with automatic rollback"
    echo "    rollback [backup]   Rollback to previous version or specific backup"
    echo "    health              Check application health status"
    echo "    status              Show deployment and service status"
    echo "    logs [lines]        Show application logs (default: 50 lines)"
    echo ""
    header "  Backup Commands:"
    echo "    backup              Create database backup"
    echo "    list                List all available backups"
    echo "    restore <file>      Restore from specific backup file"
    echo "    cleanup             Clean up old backups"
    echo "    verify <file>       Verify backup integrity"
    echo ""
    header "  Admin Commands:"
    echo "    admin grant <name>      Grant admin role to user (by display name or ID)"
    echo "    admin revoke <name>     Revoke admin role from user"
    echo "    admin list              List all admin users"
    echo "    admin token [hours]     Create admin invite token (default: 12h, example: 720h = 30 days)"
    echo "    role list               List all available roles"
    echo "    role grant <user> <role> Grant specific role to user"
    echo "    role revoke <user> <role> Revoke specific role from user"
    echo ""
    header "  Authentication Commands:"
    echo "    auth list [--details]   List pending authentication requests"
    echo "    auth approve <id> [--by <user>] Approve authentication request"
    echo "    auth reject <id> [--reason <text>] Reject authentication request"
    echo "    auth cleanup            Clean up expired authentication requests"
    echo "    auth stats              Show authentication statistics"
    echo "    import prayers <file>   Import prayers from JSON file"
    echo "    import prayer <file>    Import single prayer from text archive file"  
    echo "    import text-archives    Import data from text_archives/ directory"
    echo "    fix-prayer-content      Fix prayers with corrupted content from text archives"
    echo "    validate-archives       Check archive completeness and integrity"
    echo "    test-recovery          Simulate complete database recovery"
    echo "    full-recovery          Perform complete database reconstruction"
    echo "    repair-archives        Fix archive inconsistencies"
    echo "    heal-archives          Create missing archive files for existing prayers and users"
    echo "    sync-users             Export/sync users to text archives"
    echo "    export-sessions        Export active user sessions to JSON backup"
    echo "    export-all             Export ALL database data to text archives (invites, sessions, etc.)"
    echo "    import-all             Import ALL database data from text archives"
    echo "    sync-archives          Complete archive synchronization (safe post-deploy)"
    echo "    recovery-report        Generate recovery capability report"
    echo "    analyze-orphaned-prayers  Analyze prayers not visible in any feeds"
    echo "    heal-orphaned-prayers     Fix orphaned prayers by creating compatible users"
    echo "    reconstruct-from-archives Rebuild database relationships from text archives"
    echo "    validate-consistency      Validate archive-database consistency"
    echo "    check-duplicates        Check for duplicate users"
    echo "    merge-duplicates        Merge duplicate user accounts"
    echo "    deduplicate-user-attributes Remove duplicate entries from user attributes file"
    echo ""
    header "  Database Commands:"
    echo "    db init             Initialize database tables (first time only)"
    echo "    migrate             Run database migrations (legacy)"
    echo "    migrate new         Run enhanced schema-only migrations"
    echo "    migrate status      Show migration status and pending migrations"
    echo "    migrate rollback    Rollback last migration"
    echo ""
    header "  Utility Commands:"
    echo "    setup               Complete development environment setup"
    echo "    init                Initialize deployment environment"
    echo "    install             Install thywill globally (no more ./)"
    echo "    uninstall           Remove global installation"
    echo "    config              Show current configuration"
    echo "    sqlite              Open SQLite3 with helpful flags and table listing"
    echo "    update-env          Update .env with missing defaults from .env.example"
    echo "    help                Show this help message"
    echo "    version             Show version information"
    echo ""
    echo "EXAMPLES:"
    echo "    thywill db init                                   # Initialize database (first time)"
    echo "    thywill setup                                     # Complete Ubuntu setup"
    echo "    thywill start                                     # Start dev server on port 8000"
    echo "    thywill admin grant \"John Smith\"                # Grant admin role"
    echo "    thywill role grant \"Jane Doe\" moderator         # Grant moderator role"
    echo "    thywill admin token 24                            # Create 24-hour admin token"
    echo "    thywill import prayers backup.json               # Import prayer data"
    echo "    thywill import prayer text_archives/prayers/2025/06/prayer.txt  # Import single prayer"
    echo "    thywill import prayer text_archives/prayers/2025/06/prayer.txt --dry-run  # Preview single prayer import"
    echo "    thywill fix-prayer-content --dry-run             # Preview fixing corrupted prayer content"
    echo "    thywill fix-prayer-content                       # Fix all prayers with corrupted content"
    echo "    thywill import text-archives --dry-run           # Preview text archive import"
    echo "    thywill import text-archives                     # Import from text_archives/"
    echo "    thywill validate-archives                        # Check archive integrity"
    echo "    thywill test-recovery                            # Simulate complete recovery"
    echo "    thywill full-recovery                            # Complete database reconstruction"
    echo "    thywill heal-archives                            # Create missing archive files for prayers and users"
    echo "    thywill sync-users                               # Export/sync users to text archives"
    echo "    thywill export-sessions                          # Export active sessions to JSON"
    echo "    thywill export-all                               # Export ALL database data to text archives"
    echo "    thywill import-all                               # Import ALL database data from text archives"
    echo "    thywill import-all --dry-run                     # Preview import without making changes"
    echo "    thywill sync-archives                            # Complete post-deploy sync"
    echo "    thywill recovery-report                          # Generate recovery report"
    echo "    thywill analyze-orphaned-prayers                 # Analyze orphaned prayers"
    echo "    thywill heal-orphaned-prayers                    # Fix orphaned prayers"
    echo "    thywill reconstruct-from-archives --dry-run     # Preview archive-based reconstruction"
    echo "    thywill reconstruct-from-archives --execute     # Fix orphaned relationships from archives"
    echo "    thywill validate-consistency                     # Check archive-database consistency"
    echo "    thywill validate-schema                          # Validate database schema compatibility"
    echo "    thywill check-duplicates                         # Check for duplicate users"
    echo "    thywill merge-duplicates                         # Merge duplicate user accounts"
    echo "    thywill deduplicate-user-attributes              # Remove duplicate entries from user attributes file"
    echo "    thywill update-env                               # Update .env with missing defaults"
    echo "    thywill update-env --dry-run                     # Preview what would be added"
    echo "    thywill sqlite                                    # Open SQLite3 CLI with database"
    echo "    thywill deploy                                    # Safe deployment"
    echo "    thywill backup                                    # Create database backup"
    echo "    thywill rollback                                  # Rollback to previous"
    echo "    thywill health                                    # Check app health"
    echo ""
    echo "For more information, see: deployment/DEPLOYMENT_GUIDE.md"
}

show_version() {
    echo "ThyWill CLI v1.0.0"
    echo "Deployment and Backup Management Utility"
    echo "Built for ThyWill Prayer Application"
}

# Development commands
cmd_start() {
    # Load .env file if it exists
    if [ -f ".env" ]; then
        set -a
        source .env
        set +a
    fi
    
    local port="${1:-${PORT:-8000}}"
    local host="${2:-127.0.0.1}"
    
    header "Starting Development Server"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    # Check if virtual environment exists
    if [ ! -d "venv" ]; then
        warning "Virtual environment not found. Creating one..."
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
    else
        ensure_venv
    fi
    
    # Update .env file with missing defaults from .env.example
    if [ -f ".env.example" ]; then
        log "Checking for missing environment variables..."
        if run_python tools/update_env_defaults.py --dry-run 2>/dev/null | grep -q "Found.*missing environment variables"; then
            log "Found missing environment variables. Updating .env file..."
            run_python tools/update_env_defaults.py 2>/dev/null || true
            log "Environment file updated with missing defaults"
        else
            log "Environment file is up to date"
        fi
    fi
    
    # Check if .env file exists and create if needed
    if [ ! -f ".env" ]; then
        log "Creating .env file with default configuration..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log "Copied .env.example to .env"
        else
            # Create minimal .env if .env.example doesn't exist
            cat > .env << 'EOF'
# ThyWill Environment Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here
# DATABASE_PATH=thywill.db  # Optional: specify custom database path
JWT_SECRET=changeme
MULTI_DEVICE_AUTH_ENABLED=true
REQUIRE_APPROVAL_FOR_EXISTING_USERS=true
PEER_APPROVAL_COUNT=2
REQUIRE_VERIFICATION_CODE=false
INVITE_TOKEN_EXPIRATION_HOURS=12
REQUIRE_INVITE_LOGIN_VERIFICATION=false
SESSION_DAYS=90
TEXT_ARCHIVE_ENABLED=true
TEXT_ARCHIVE_BASE_DIR=./text_archives
TEXT_ARCHIVE_COMPRESSION_AFTER_DAYS=365
PRAYER_MODE_ENABLED=true
PAYPAL_USERNAME=
VENMO_HANDLE=
EXPORT_RATE_LIMIT_MINUTES=2
EXPORT_CACHE_TTL_MINUTES=15
ENVIRONMENT=development
PORT=8000
BASE_URL=http://127.0.0.1:8000
INIT_DATABASE=false
FORCE_YES=false
EOF
            log "Created minimal .env file"
        fi
        echo ""
        warning "IMPORTANT: You must edit .env to add your Anthropic API key!"
        echo "  1. Get your API key from: https://console.anthropic.com/"
        echo "  2. Edit .env file: nano .env"
        echo "  3. Replace 'your_anthropic_api_key_here' with your actual key"
        echo ""
        read -p "Press Enter to continue or Ctrl+C to exit and edit .env now..."
        echo ""
    fi
    
    # Check if uvicorn is installed
    if ! python -c "import uvicorn" 2>/dev/null; then
        log "Installing uvicorn..."
        pip install uvicorn
    fi
    
    log "Starting development server on http://$host:$port"
    log "Press Ctrl+C to stop the server"
    echo ""
    
    # Start the development server
    exec uvicorn app:app --host "$host" --port "$port" --reload
}

# Deployment commands
cmd_deploy() {
    header "Starting Safe Deployment"
    
    if [ ! -f "$DEPLOYMENT_DIR/deploy.sh" ]; then
        error "Deployment script not found at $DEPLOYMENT_DIR/deploy.sh"
        exit 1
    fi
    
    log "Running deployment with automatic rollback..."
    cd "$SCRIPT_DIR"
    exec "$DEPLOYMENT_DIR/deploy.sh"
}

cmd_rollback() {
    local backup_file="${1:-}"
    
    header "Rolling Back Deployment"
    
    if [ -n "$backup_file" ]; then
        log "Rolling back to specific backup: $backup_file"
        "$DEPLOYMENT_DIR/backup_management.sh" restore "$backup_file"
    else
        log "Rolling back to most recent backup..."
        
        # Find most recent backup
        local latest_backup
        latest_backup=$(find "$BACKUP_DIR" -name "thywill_*.db" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
        
        if [ -z "$latest_backup" ]; then
            error "No backups found for rollback"
            exit 1
        fi
        
        log "Found latest backup: $latest_backup"
        "$DEPLOYMENT_DIR/backup_management.sh" restore "$latest_backup"
    fi
}

cmd_health() {
    header "Application Health Check"
    
    log "Checking service status..."
    if systemctl is-active --quiet thywill; then
        success "ThyWill service is running"
    else
        error "ThyWill service is not running"
        echo "Run: sudo systemctl start thywill"
        exit 1
    fi
    
    log "Checking health endpoint..."
    if curl -f -s http://127.0.0.1:8000/health > /dev/null 2>&1; then
        success "Health endpoint responding"
        echo ""
        echo "Health Details:"
        curl -s http://127.0.0.1:8000/health | python3 -m json.tool 2>/dev/null || curl -s http://127.0.0.1:8000/health
    else
        error "Health endpoint not responding"
        warning "Application may be starting up or experiencing issues"
        cmd_logs 20
        exit 1
    fi
}

cmd_status() {
    header "System Status"
    
    echo ""
    log "Service Status:"
    systemctl status thywill --no-pager -l || true
    
    echo ""
    log "Recent Deployments:"
    if [ -d "/home/thywill/deploy_logs" ]; then
        ls -la /home/thywill/deploy_logs/ | tail -5 || echo "No deployment logs found"
    else
        echo "No deployment logs directory found"
    fi
    
    echo ""
    log "Backup Status:"
    if [ -d "$BACKUP_DIR" ]; then
        echo "Daily backups: $(find $BACKUP_DIR/daily -name "*.db" 2>/dev/null | wc -l) files"
        echo "Weekly backups: $(find $BACKUP_DIR/weekly -name "*.db" 2>/dev/null | wc -l) files"
        echo "Latest backup: $(find $BACKUP_DIR -name "thywill_*.db" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2- | xargs basename 2>/dev/null || echo 'None found')"
    else
        warning "Backup directory not found"
    fi
    
    echo ""
    log "Disk Usage:"
    df -h "$BACKUP_DIR" 2>/dev/null || df -h /home/thywill/ 2>/dev/null || df -h /home/
}

cmd_logs() {
    local lines="${1:-50}"
    
    header "Application Logs (last $lines lines)"
    
    if command -v journalctl >/dev/null 2>&1; then
        journalctl -u thywill -n "$lines" --no-pager
    else
        error "journalctl not available. Check system logs manually."
        exit 1
    fi
}

# Backup commands
cmd_backup() {
    header "Creating Database Backup"
    "$DEPLOYMENT_DIR/backup_management.sh" daily
}

cmd_list() {
    header "Available Backups"
    "$DEPLOYMENT_DIR/backup_management.sh" list
}

cmd_restore() {
    local backup_file="${1:-}"
    
    if [ -z "$backup_file" ]; then
        error "Backup file path required"
        echo "Usage: thywill restore <backup_file>"
        echo "Use 'thywill list' to see available backups"
        exit 1
    fi
    
    header "Restoring from Backup"
    "$DEPLOYMENT_DIR/backup_management.sh" restore "$backup_file"
}

cmd_cleanup() {
    header "Cleaning Up Old Backups"
    "$DEPLOYMENT_DIR/backup_management.sh" cleanup
}

cmd_verify() {
    local backup_file="${1:-}"
    
    if [ -z "$backup_file" ]; then
        error "Backup file path required"
        echo "Usage: thywill verify <backup_file>"
        exit 1
    fi
    
    # Use Python CLI module for backup verification
    run_python -m app_helpers.cli.backup_verification "$backup_file"
}

# Admin commands
cmd_admin() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        grant)
            cmd_admin_grant "$@"
            ;;
        revoke)
            cmd_admin_revoke "$@"
            ;;
        list)
            cmd_admin_list "$@"
            ;;
        token)
            cmd_admin_token "$@"
            ;;
        *)
            error "Unknown admin subcommand: $subcommand"
            echo "Available subcommands: grant, revoke, list, token"
            echo "Usage: thywill admin <subcommand> [args]"
            exit 1
            ;;
    esac
}

cmd_admin_grant() {
    local user_identifier="${1:-}"
    
    if [ -z "$user_identifier" ]; then
        error "User identifier required"
        echo "Usage: thywill admin grant <display_name_or_user_id>"
        echo "Examples:"
        echo "  thywill admin grant \"John Smith\""
        echo "  thywill admin grant abc123def456"
        exit 1
    fi
    
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management grant "$user_identifier"
}

cmd_admin_revoke() {
    local user_identifier="${1:-}"
    
    if [ -z "$user_identifier" ]; then
        error "User identifier required"
        echo "Usage: thywill admin revoke <display_name_or_user_id>"
        echo "Examples:"
        echo "  thywill admin revoke \"John Smith\""
        echo "  thywill admin revoke abc123def456"
        exit 1
    fi
    
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management revoke "$user_identifier"
}

cmd_admin_list() {
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management list
}

cmd_admin_token() {
    local hours="${1:-12}"
    
    header "Creating Admin Invite Token"
    
    # Validate hours
    if ! [[ "$hours" =~ ^[0-9]+$ ]] || [ "$hours" -le 0 ]; then
        error "Hours must be a positive number"
        echo "Usage: thywill admin token [hours]"
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ] && [ ! -f "thywill.db" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Call the standalone Python script to create admin token
    if ! run_python scripts/admin/create_admin_token.py --hours "$hours"; then
        error "Failed to create admin token"
        exit 1
    fi
}

cmd_role() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        list)
            cmd_role_list "$@"
            ;;
        grant)
            cmd_role_grant "$@"
            ;;
        revoke)
            cmd_role_revoke "$@"
            ;;
        *)
            error "Unknown role subcommand: $subcommand"
            echo "Available subcommands: list, grant, revoke"
            echo "Usage: thywill role <subcommand> [args]"
            echo ""
            echo "Examples:"
            echo "  thywill role list"
            echo "  thywill role grant \"John Smith\" moderator"
            echo "  thywill role revoke \"John Smith\" moderator"
            exit 1
            ;;
    esac
}

cmd_role_list() {
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management list-roles
}

cmd_role_grant() {
    local user_identifier="${1:-}"
    local role_name="${2:-}"
    
    if [ -z "$user_identifier" ] || [ -z "$role_name" ]; then
        error "User and role required"
        echo "Usage: thywill role grant <user> <role>"
        echo "Examples:"
        echo "  thywill role grant \"John Smith\" moderator"
        echo "  thywill role grant abc123def456 user"
        exit 1
    fi
    
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management grant "$user_identifier" "$role_name"
}

cmd_role_revoke() {
    local user_identifier="${1:-}"
    local role_name="${2:-}"
    
    if [ -z "$user_identifier" ] || [ -z "$role_name" ]; then
        error "User and role required"
        echo "Usage: thywill role revoke <user> <role>"
        echo "Examples:"
        echo "  thywill role revoke \"John Smith\" moderator"
        echo "  thywill role revoke abc123def456 user"
        exit 1
    fi
    
    header "Revoking Role: $role_name"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ] && [ ! -f "thywill.db" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    log "Looking up user: $user_identifier"
    log "Role to revoke: $role_name"
    
    # Use Python CLI module for role management
    run_python -m app_helpers.cli.role_management revoke "$user_identifier" "$role_name"
}

cmd_auth() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        list)
            cmd_auth_list "$@"
            ;;
        approve)
            cmd_auth_approve "$@"
            ;;
        reject)
            cmd_auth_reject "$@"
            ;;
        cleanup)
            cmd_auth_cleanup "$@"
            ;;
        stats)
            cmd_auth_stats "$@"
            ;;
        *)
            error "Unknown auth subcommand: $subcommand"
            echo "Available subcommands: list, approve, reject, cleanup, stats"
            echo "Usage: thywill auth <subcommand> [args]"
            echo ""
            echo "Examples:"
            echo "  thywill auth list                    # List pending requests"
            echo "  thywill auth list --details         # List with full details"
            echo "  thywill auth approve abc123         # Approve request by ID"
            echo "  thywill auth approve abc123 --by john # Approve as specific user"
            echo "  thywill auth reject abc123          # Reject request"
            echo "  thywill auth cleanup                # Clean expired requests"
            echo "  thywill auth stats                  # Show statistics"
            exit 1
            ;;
    esac
}

cmd_auth_list() {
    header "Authentication Requests"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Use the auth manager tool
    run_python tools/auth_manager.py list "$@"
}

cmd_auth_approve() {
    local request_id="${1:-}"
    
    if [ -z "$request_id" ]; then
        error "Request ID required"
        echo "Usage: thywill auth approve <request_id> [--by <approver>]"
        echo "Example: thywill auth approve abc123"
        exit 1
    fi
    
    header "Approving Authentication Request"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Use the auth manager tool
    run_python tools/auth_manager.py approve "$@"
}

cmd_auth_reject() {
    local request_id="${1:-}"
    
    if [ -z "$request_id" ]; then
        error "Request ID required"
        echo "Usage: thywill auth reject <request_id> [--reason <reason>]"
        echo "Example: thywill auth reject abc123 --reason 'Suspicious activity'"
        exit 1
    fi
    
    header "Rejecting Authentication Request"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Use the auth manager tool
    run_python tools/auth_manager.py reject "$@"
}

cmd_auth_cleanup() {
    header "Cleaning Up Expired Requests"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Use the auth manager tool
    run_python tools/auth_manager.py cleanup "$@"
}

cmd_auth_stats() {
    header "Authentication Statistics"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "Must run from ThyWill project directory"
        exit 1
    fi
    
    # Use the auth manager tool
    run_python tools/auth_manager.py stats "$@"
}

cmd_import() {
    local import_type="${1:-}"
    local file_path="${2:-}"
    
    case "$import_type" in
        prayers)
            cmd_import_prayers "$file_path"
            ;;
        text-archives)
            cmd_import_text_archives "${@:2}"
            ;;
        prayer)
            cmd_import_prayer "${@:2}"
            ;;
        *)
            error "Unknown import type: $import_type"
            echo "Available import types: prayers, text-archives, prayer"
            echo "Usage: thywill import <type> <file> [options]"
            echo ""
            echo "Examples:"
            echo "  thywill import prayers backup.json"
            echo "  thywill import text-archives"
            echo "  thywill import text-archives --dry-run"
            echo "  thywill import prayer path/to/prayer.txt"
            echo "  thywill import prayer path/to/prayer.txt --dry-run"
            exit 1
            ;;
    esac
}

cmd_import_prayers() {
    local file_path="${1:-}"
    
    if [ -z "$file_path" ]; then
        error "File path required"
        echo "Usage: thywill import prayers <json_file>"
        echo ""
        echo "Expected JSON format:"
        echo '['
        echo '  {'
        echo '    "text": "Prayer request text",'
        echo '    "generated_prayer": "Generated prayer response",'
        echo '    "author_name": "User Display Name",'
        echo '    "author_id": "existing_user_id (optional)",'
        echo '    "project_tag": "optional tag",'
        echo '    "target_audience": "all",'
        echo '    "created_at": "2023-12-01T10:00:00"'
        echo '  }'
        echo ']'
        exit 1
    fi
    
    # Use Python CLI module for prayer import
    run_python -m app_helpers.cli.prayer_import "$file_path"
}

cmd_import_prayer() {
    local file_path=""
    local dry_run_flag=""
    local update_existing_flag=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                dry_run_flag="--dry-run"
                shift
                ;;
            --update-existing)
                update_existing_flag="--update-existing"
                shift
                ;;
            *)
                if [ -z "$file_path" ]; then
                    file_path="$1"
                else
                    error "Unexpected argument: $1"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$file_path" ]; then
        error "Prayer file path required"
        echo "Usage: thywill import prayer <prayer_file> [--dry-run] [--update-existing]"
        echo ""
        echo "Examples:"
        echo "  thywill import prayer text_archives/prayers/2025/06/prayer.txt"
        echo "  thywill import prayer text_archives/prayers/2025/06/prayer.txt --dry-run"
        echo "  thywill import prayer text_archives/prayers/2025/06/prayer.txt --update-existing"
        echo ""
        echo "The prayer file must be in text archive format with:"
        echo "  - Prayer ID and author on first line"
        echo "  - Submission timestamp on second line" 
        echo "  - Audience specification on third line"
        echo "  - Prayer text and activities in proper format"
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ] && [ ! -f "thywill.db" ]; then
        error "Must run from ThyWill project directory"
        echo "Database or models.py not found"
        exit 1
    fi
    
    # Check if file exists
    if [ ! -f "$file_path" ]; then
        error "Prayer file not found: $file_path"
        exit 1
    fi
    
    header "Importing Single Prayer File"
    log "File: $file_path"
    
    if [ -n "$dry_run_flag" ]; then
        log "Running in dry-run mode (preview only)"
    fi
    
    if [ -n "$update_existing_flag" ]; then
        log "Update existing mode enabled"
    fi
    
    # Execute Python import using the ImportService
    run_python -c "
import sys
sys.path.append('.')
from app_helpers.services.import_service import import_single_prayer_file

dry_run = '$dry_run_flag' == '--dry-run'
update_existing = '$update_existing_flag' == '--update-existing'
success = import_single_prayer_file('$file_path', dry_run=dry_run, update_existing=update_existing)
sys.exit(0 if success else 1)
"
}

cmd_import_text_archives() {
    header "Importing Text Archives"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ] && [ ! -f "thywill.db" ]; then
        error "Must run from ThyWill project directory"
        echo "Database or models.py not found"
        exit 1
    fi
    
    # Check if import script exists
    if [ ! -f "scripts/utils/import_text_archives.py" ]; then
        error "Text archives import script not found: scripts/utils/import_text_archives.py"
        echo "Please ensure the import script is in the project directory"
        exit 1
    fi
    
    # Check if we have a ZIP file argument or text_archives directory
    if [ "$#" -gt 0 ] && [[ "$1" == *.zip ]]; then
        # ZIP file provided
        if [ ! -f "$1" ]; then
            error "ZIP file not found: $1"
            exit 1
        fi
        log "Importing data from ZIP file: $1"
    else
        # Check if text_archives directory exists
        if [ ! -d "text_archives" ]; then
            error "text_archives directory not found"
            echo "Please ensure text_archives/ directory exists in the project root"
            echo "Or provide a ZIP file: thywill import text-archives archive.zip"
            exit 1
        fi
        log "Importing data from text_archives/ directory..."
    fi
    
    # Execute Python import script with all arguments
    run_python scripts/utils/import_text_archives.py "$@"
}

# Archive validation and recovery commands
cmd_validate_archives() {
    header "Archive Validation"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    if [ ! -d "text_archives" ]; then
        warning "text_archives/ directory not found"
        echo "Creating empty text_archives/ directory for validation..."
        mkdir -p text_archives
    fi
    
    log "Validating archive completeness and integrity..."
    
    # Use Python CLI module for archive validation
    run_python -m app_helpers.cli.archive_validation validate
}

cmd_test_recovery() {
    header "Test Recovery (Dry Run)"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    if [ ! -d "text_archives" ]; then
        error "text_archives/ directory not found"
        echo "Please ensure text_archives/ directory exists in the project root"
        exit 1
    fi
    
    log "Simulating complete database recovery (dry run)..."
    warning "This is a simulation - no actual changes will be made"
    
    # Use Python CLI module for archive validation
    run_python -m app_helpers.cli.archive_validation test-recovery
}

cmd_full_recovery() {
    header "Complete Database Recovery"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    if [ ! -d "text_archives" ]; then
        error "text_archives/ directory not found"
        echo "Please ensure text_archives/ directory exists in the project root"
        exit 1
    fi
    
    # Safety confirmation
    echo ""
    warning "IMPORTANT: This will completely reconstruct the database from text archives"
    warning "Make sure you have a backup of your current database!"
    echo ""
    read -p "Are you sure you want to proceed? (type 'yes' to continue): " confirm
    
    if [ "$confirm" != "yes" ]; then
        echo "Recovery cancelled."
        exit 0
    fi
    
    log "Performing complete database recovery from text archives..."
    
    # Create backup first
    timestamp=$(date '+%Y%m%d_%H%M%S')
    backup_name="pre_recovery_${timestamp}.db"
    
    if [ -f "thywill.db" ]; then
        log "Creating backup: $backup_name"
        cp thywill.db "$backup_name"
        success "Backup created: $backup_name"
    fi
    
    # Use Python CLI module for archive validation
    if run_python -m app_helpers.cli.archive_validation full-recovery; then
        success "Recovery completed successfully!"
        echo "💡 Your backup is available at: $backup_name"
    else
        error "Recovery failed!"
        echo "💡 Your backup is available at: $backup_name"
        exit 1
    fi
}

cmd_repair_archives() {
    header "Archive Repair"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Checking and repairing archive inconsistencies..."
    
    # Use Python CLI module for archive validation
    run_python -m app_helpers.cli.archive_validation repair
}

cmd_heal_archives() {
    # Use Python CLI module for archive management
    run_python -m app_helpers.cli.archive_management heal-archives
}

cmd_fix_prayer_content() {
    local dry_run_flag=""
    local archives_dir="text_archives"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                dry_run_flag="--dry-run"
                shift
                ;;
            --archives-dir)
                archives_dir="$2"
                shift 2
                ;;
            *)
                error "Unknown argument: $1"
                echo "Usage: thywill fix-prayer-content [--dry-run] [--archives-dir DIR]"
                echo ""
                echo "This command fixes prayers with corrupted content by updating them"
                echo "with the correct content from their text archive files."
                echo ""
                echo "Options:"
                echo "  --dry-run           Preview changes without making them"
                echo "  --archives-dir DIR  Use specific archives directory (default: text_archives)"
                echo ""
                echo "Examples:"
                echo "  thywill fix-prayer-content --dry-run    # Preview what would be fixed"
                echo "  thywill fix-prayer-content              # Fix all corrupted prayers"
                exit 1
                ;;
        esac
    done
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ] && [ ! -f "thywill.db" ]; then
        error "Must run from ThyWill project directory"
        echo "Database or models.py not found"
        exit 1
    fi
    
    # Check if archives directory exists
    if [ ! -d "$archives_dir" ]; then
        error "Archives directory not found: $archives_dir"
        echo "Please ensure the archives directory exists"
        exit 1
    fi
    
    # Check if prayer archives exist
    if [ ! -d "$archives_dir/prayers" ]; then
        error "No prayers directory found in: $archives_dir"
        echo "Please ensure $archives_dir/prayers directory exists with prayer files"
        exit 1
    fi
    
    header "Fix Prayer Content from Text Archives"
    log "Archives directory: $archives_dir"
    
    if [ -n "$dry_run_flag" ]; then
        log "Running in dry-run mode (preview only)"
    fi
    
    # Count prayer files
    local prayer_count=$(find "$archives_dir/prayers" -name "*.txt" | wc -l)
    log "Found $prayer_count prayer files to process"
    
    if [ "$prayer_count" -eq 0 ]; then
        warning "No prayer files found in $archives_dir/prayers"
        exit 0
    fi
    
    echo ""
    log "Processing prayer files..."
    
    # Use find to process each prayer file
    local processed=0
    local updated=0
    local skipped=0
    local errors=0
    
    while IFS= read -r -d '' file; do
        echo ""
        echo "[$((++processed))/$prayer_count] Processing: $(basename "$file")"
        
        # Run the import command and capture result
        temp_output="/tmp/prayer_import_$$.tmp"
        ./thywill import prayer "$file" --update-existing $dry_run_flag > "$temp_output" 2>&1
        
        # Check patterns safely to avoid script exit with set -euo pipefail
        set +e  # Temporarily disable exit on error
        grep -q "Updated existing prayer\|Would update existing prayer" "$temp_output" 2>/dev/null
        updated_match=$?
        grep -q "Skipping import to avoid duplicate" "$temp_output" 2>/dev/null
        skipped_match=$?
        
        if [ $updated_match -eq 0 ]; then
            ((updated++))
        elif [ $skipped_match -eq 0 ]; then
            ((skipped++))
        else
            ((errors++))
        fi
        
        set -e  # Re-enable exit on error
        
        rm -f "$temp_output"
    done < <(find "$archives_dir/prayers" -name "*.txt" -print0)
    
    echo ""
    echo "============================================================"
    
    if [ -n "$dry_run_flag" ]; then
        success "Preview completed!"
        echo "Results (would be applied):"
    else
        success "Prayer content fix completed!"
        echo "Results:"
    fi
    
    echo "  📄 Total files processed: $processed"
    echo "  🔄 Prayers updated: $updated"
    echo "  ✅ Prayers already correct: $skipped"
    echo "  ❌ Errors encountered: $errors"
    
    if [ "$errors" -gt 0 ]; then
        echo ""
        warning "Some prayers could not be processed. Check output above for details."
    fi
    
    if [ -n "$dry_run_flag" ]; then
        echo ""
        log "To apply these changes, run: thywill fix-prayer-content"
    fi
}

cmd_sync_users() {
    header "Sync Users to Text Archives"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Syncing users from database to text archives..."
    
    # Run only the user healing portion
    run_python -c "
import sys
sys.path.append('.')
from scripts.utils.heal_prayer_archives import heal_user_archives
if heal_user_archives():
    print('✅ User sync completed successfully')
else:
    print('❌ User sync failed')
    sys.exit(1)
"
}

cmd_export_sessions() {
    header "Export Active User Sessions"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Exporting active user sessions to JSON backup..."
    
    # Run the session export tool
    run_python tools/export_active_sessions.py
    
    if [ $? -eq 0 ]; then
        success "Sessions exported to sessions_backup.json"
        echo "💡 Use tools/restore_active_sessions.py to restore after database recovery"
    else
        error "Session export failed"
        exit 1
    fi
}

cmd_export_all() {
    header "Export ALL Database Data to Text Archives"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Exporting ALL database data to text archives..."
    log "This includes invites, sessions, security logs, and everything else in the database"
    
    # Use Python CLI module for complete export
    run_python -m app_helpers.cli.archive_management export-all
    
    if [ $? -eq 0 ]; then
        success "Complete database export completed!"
        echo "💡 All data exported to text_archives/database_exports/"
    else
        error "Database export failed"
        exit 1
    fi
}

cmd_import_all() {
    local dry_run=""
    
    # Check for --dry-run flag
    for arg in "$@"; do
        if [[ "$arg" == "--dry-run" ]]; then
            dry_run="--dry-run"
            break
        fi
    done
    
    if [[ -n "$dry_run" ]]; then
        header "Preview Database Import from Text Archives"
    else
        header "Import ALL Database Data from Text Archives"
    fi
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    if [[ -n "$dry_run" ]]; then
        log "Previewing import of ALL database data from text archives..."
        log "This will show what would be imported without making changes"
    else
        log "Importing ALL database data from text archives..."
        log "This includes invites, sessions, security logs, and everything else"
    fi
    
    # Use Python CLI module for complete import
    if [[ -n "$dry_run" ]]; then
        run_python -m app_helpers.cli.archive_management import-all --dry-run
    else
        run_python -m app_helpers.cli.archive_management import-all
    fi
    
    if [ $? -eq 0 ]; then
        if [[ -n "$dry_run" ]]; then
            success "Import preview completed!"
            echo "💡 Run without --dry-run to perform actual import"
        else
            success "Complete database import completed!"
            echo "💡 All exported data has been restored to the database"
        fi
    else
        error "Database import failed"
        exit 1
    fi
}

cmd_sync_archives() {
    header "Complete Archive Synchronization"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Performing complete archive synchronization after deployment..."
    echo ""
    warning "This will run all necessary commands to synchronize archives with database"
    echo "Steps to be performed:"
    echo "  0. Check database initialization (if needed)"
    echo "  1. Validate current archive structure"
    echo "  2. Import any missing data from text archives"
    echo "  3. Create missing archive files for existing prayers"
    echo "  4. Generate final validation report"
    echo ""
    
    # Step 0: Check if database is initialized
    log "Step 0: Checking database initialization..."
    if [ -f "thywill.db" ]; then
        log "Database file exists"
    else
        warning "Database file not found - database may need initialization"
        echo ""
        read -p "Initialize database now? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log "Initializing database..."
            if ! cmd_db_init; then
                error "Database initialization failed"
                exit 1
            fi
        else
            error "Database initialization required but skipped"
            echo "Please run: thywill db init"
            exit 1
        fi
    fi
    
    echo ""
    
    # Step 1: Validate archives
    log "Step 1: Validating archive structure..."
    if ! cmd_validate_archives; then
        error "Archive validation failed"
        exit 1
    fi
    
    echo ""
    
    # Step 2: Import text archives (dry run first)
    log "Step 2: Checking what needs to be imported..."
    if ! cmd_import_text_archives --dry-run; then
        error "Text archive import check failed"
        exit 1
    fi
    
    echo ""
    read -p "Continue with import? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "Importing text archives..."
        if ! cmd_import_text_archives; then
            error "Text archive import failed"
            exit 1
        fi
    else
        log "Skipping text archive import"
    fi
    
    echo ""
    
    # Step 3: Heal missing archive files
    log "Step 3: Creating missing archive files..."
    if ! cmd_heal_archives; then
        error "Archive healing failed"
        exit 1
    fi
    
    echo ""
    
    # Step 4: Final validation
    log "Step 4: Final validation..."
    if ! cmd_validate_archives; then
        warning "Final validation showed issues - review output above"
    fi
    
    echo ""
    success "Archive synchronization completed!"
    echo ""
    echo "Summary:"
    echo "  ✅ Database initialization checked"
    echo "  ✅ Archive structure validated"
    echo "  ✅ Text archives imported"
    echo "  ✅ Missing archive files created"
    echo "  ✅ Final validation performed"
    echo ""
    echo "💡 Your archives and database should now be synchronized"
    echo "💡 Run 'thywill recovery-report' to see complete recovery capability"
}


cmd_recovery_report() {
    # Use Python CLI module for recovery reports
    run_python -m app_helpers.cli.recovery_report
}

cmd_analyze_orphaned_prayers() {
    header "Analyzing Orphaned Prayers"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Analyzing prayers not visible in any feeds..."
    
    # Execute Python analysis module
    run_python -m app_helpers.cli.prayer_analysis
}

cmd_heal_orphaned_prayers() {
    header "Healing Orphaned Prayers"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Fixing orphaned prayers by creating compatible users..."
    
    # Execute Python healing module
    run_python -m app_helpers.cli.prayer_healing
}

cmd_reconstruct_from_archives() {
    header "Archive-Based Database Reconstruction"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Rebuilding database relationships from text archives..."
    log "This tool fixes orphaned prayers and prayer marks using archive data as source of truth"
    
    # Execute reconstruction script with arguments passed through
    python3 tools/repair/reconstruct_from_archives.py "$@"
}

cmd_validate_consistency() {
    header "Archive-Database Consistency Validation"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Validating consistency between text archives and database..."
    log "This provides a comprehensive report on data integrity"
    
    # Execute validation script with arguments passed through
    python3 tools/analysis/validate_archive_consistency.py "$@"
}

cmd_validate_schema() {
    header "Database Schema Validation"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Validating database schema compatibility..."
    log "This checks schema structure, constraints, and model compatibility"
    
    # Use Python CLI module for schema validation
    run_python -m app_helpers.cli.schema_validation validate
}

cmd_deduplicate_user_attributes() {
    header "Deduplicate User Attributes"
    
    # Check if we're in the right directory
    if [ ! -f "app.py" ]; then
        error "app.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Removing duplicate entries from user attributes file..."
    log "This will backup the original file and remove duplicates"
    
    # Run the deduplication script
    python3 scripts/utils/deduplicate_user_attributes.py "$@"
}

# Database commands
cmd_db() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        init)
            cmd_db_init "$@"
            ;;
        *)
            error "Unknown database subcommand: $subcommand"
            echo "Available subcommands: init"
            echo "Usage: thywill db <subcommand> [args]"
            echo ""
            echo "Examples:"
            echo "  thywill db init        # Initialize database tables (first time only)"
            exit 1
            ;;
    esac
}

cmd_migrate() {
    local subcommand="${1:-}"
    shift || true
    
    case "$subcommand" in
        ""|legacy)
            cmd_migrate_legacy "$@"
            ;;
        new)
            cmd_migrate_new "$@"
            ;;
        status)
            cmd_migrate_status "$@"
            ;;
        rollback)
            cmd_migrate_rollback "$@"
            ;;
        *)
            error "Unknown migrate subcommand: $subcommand"
            echo "Available subcommands: new, status, rollback, legacy"
            echo "Usage: thywill migrate <subcommand> [args]"
            echo ""
            echo "Examples:"
            echo "  thywill migrate new        # Run enhanced schema-only migrations"
            echo "  thywill migrate status     # Show migration status"
            echo "  thywill migrate rollback   # Rollback last migration"
            echo "  thywill migrate            # Run legacy migrations (old system)"
            exit 1
            ;;
    esac
}

cmd_migrate_legacy() {
    header "Running Legacy Database Migrations"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "models.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Running database migrations..."
    
    # Use Python CLI module for legacy migration
    if run_python -m app_helpers.cli.migration_runner legacy; then
        success "Database migration completed successfully"
    else
        error "Database migration failed"
        exit 1
    fi
}

cmd_migrate_new() {
    header "Running Enhanced Schema-Only Migrations"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "models.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Running enhanced migrations..."
    
    # Use Python CLI module for migration management
    run_python -m app_helpers.cli.migration_runner new
    
    if [ $? -eq 0 ]; then
        success "Enhanced migrations completed successfully"
    else
        error "Enhanced migrations failed"
        exit 1
    fi
}

cmd_migrate_status() {
    # Use Python CLI module for migration management
    run_python -m app_helpers.cli.migration_management status
}

cmd_migrate_rollback() {
    local migration_id="${1:-}"
    
    header "Rolling Back Migration"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "models.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    if [ -z "$migration_id" ]; then
        # Show available migrations to rollback
        warning "No migration ID specified. Finding last applied migration..."
        
        migration_id=$(run_python -m app_helpers.cli.migration_management get-current-version)
        
        if [ -z "$migration_id" ]; then
            error "No migrations found to rollback"
            echo "Use 'thywill migrate status' to see applied migrations"
            exit 1
        fi
        
        log "Found last migration: $migration_id"
        read -p "Rollback this migration? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            warning "Rollback cancelled"
            exit 0
        fi
    fi
    
    # Use Python CLI module for migration management
    if [ -n "$migration_id" ]; then
        run_python -m app_helpers.cli.migration_management rollback "$migration_id"
    else
        run_python -m app_helpers.cli.migration_management rollback
    fi
}

cmd_db_init() {
    header "Database Initialization"
    
    # Check if we're in the right directory
    if [ ! -f "models.py" ]; then
        error "models.py not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    # Check if create_database.py exists
    if [ ! -f "scripts/utils/create_database.py" ]; then
        error "scripts/utils/create_database.py script not found"
        echo "Please ensure the database creation script is in the project directory"
        exit 1
    fi
    
    # Create .env file if it doesn't exist
    if [ ! -f ".env" ]; then
        log "Creating .env file with default configuration..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log "Copied .env.example to .env"
        else
            # Create minimal .env if .env.example doesn't exist
            cat > .env << 'EOF'
# ThyWill Environment Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here
# DATABASE_PATH=thywill.db  # Optional: specify custom database path
JWT_SECRET=changeme
MULTI_DEVICE_AUTH_ENABLED=true
REQUIRE_APPROVAL_FOR_EXISTING_USERS=true
PEER_APPROVAL_COUNT=2
REQUIRE_VERIFICATION_CODE=false
INVITE_TOKEN_EXPIRATION_HOURS=12
REQUIRE_INVITE_LOGIN_VERIFICATION=false
SESSION_DAYS=90
TEXT_ARCHIVE_ENABLED=true
TEXT_ARCHIVE_BASE_DIR=./text_archives
TEXT_ARCHIVE_COMPRESSION_AFTER_DAYS=365
PRAYER_MODE_ENABLED=true
PAYPAL_USERNAME=
VENMO_HANDLE=
EXPORT_RATE_LIMIT_MINUTES=2
EXPORT_CACHE_TTL_MINUTES=15
ENVIRONMENT=development
PORT=8000
BASE_URL=http://127.0.0.1:8000
INIT_DATABASE=false
FORCE_YES=false
EOF
            log "Created minimal .env file"
        fi
        echo ""
        warning "IMPORTANT: You must edit .env to add your Anthropic API key!"
        echo "  1. Get your API key from: https://console.anthropic.com/"
        echo "  2. Edit .env file: nano .env"
        echo "  3. Replace 'your_anthropic_api_key_here' with your actual key"
        echo ""
    fi
    
    log "Running database initialization script..."
    echo ""
    
    # Execute the standalone database creation script
    run_python scripts/utils/create_database.py
    
    if [ $? -eq 0 ]; then
        echo ""
        success "Database initialization completed!"
        echo ""
        echo "Next steps:"
        echo "  1. Edit .env file to add your Anthropic API key"
        echo "  2. thywill start          # Start development server"
        echo "  3. thywill admin token    # Create first admin account"
    else
        echo ""
        error "Database initialization failed"
        echo "Check the error messages above for details"
        exit 1
    fi
}

cmd_sqlite() {
    header "Opening SQLite3 Database Shell"
    
    # Check if we're in the right directory
    if [ ! -f "thywill.db" ]; then
        error "Database file 'thywill.db' not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        echo "If database doesn't exist, run: thywill db init"
        exit 1
    fi
    
    # Check if sqlite3 is installed
    if ! command -v sqlite3 >/dev/null 2>&1; then
        error "sqlite3 command not found"
        echo "Please install sqlite3:"
        echo "  Ubuntu/Debian: sudo apt install sqlite3"
        echo "  macOS: brew install sqlite3"
        exit 1
    fi
    
    log "Opening thywill.db with SQLite3..."
    log "Helpful commands will be shown after connecting"
    echo ""
    
    # Create a temporary init file with helpful settings and commands
    temp_init=$(mktemp)
    cat > "$temp_init" << 'EOF'
-- SQLite3 helpful settings
.headers on
.mode column
.width 20 40 20 15

-- Show helpful information
.print "🗄️  ThyWill Database Shell"
.print "================================"
.print ""
.print "📋 Available Tables:"
.tables
.print ""
.print "💡 Helpful Commands:"
.print "  .tables                    -- List all tables"
.print "  .schema TABLE_NAME         -- Show table structure"
.print "  .schema                    -- Show all table schemas"
.print "  .headers on|off            -- Toggle column headers"
.print "  .mode column|list|csv      -- Change output format"
.print "  .width 10 20 30            -- Set column widths"
.print "  .help                      -- Show all SQLite commands"
.print "  .quit or .exit             -- Exit SQLite shell"
.print ""
.print "🔍 Quick Queries:"
.print "  SELECT COUNT(*) FROM user;              -- Count users"
.print "  SELECT COUNT(*) FROM prayer;            -- Count prayers"
.print "  SELECT display_name FROM user LIMIT 5;  -- Show first 5 users"
.print "  SELECT text FROM prayer LIMIT 3;        -- Show first 3 prayers"
.print ""
.print "Ready! Type your SQL commands below:"
.print ""
EOF
    
    # Launch sqlite3 with the init file
    sqlite3 -init "$temp_init" thywill.db
    
    # Clean up temp file
    rm -f "$temp_init"
    
    echo ""
    success "SQLite3 session ended"
}

# Utility commands
cmd_setup() {
    header "ThyWill Complete Ubuntu Setup"
    
    log "This will install all required packages and set up the development environment"
    echo ""
    warning "This command will:"
    echo "  1. Update apt packages"
    echo "  2. Install Python 3, pip, venv, nginx, sqlite3"
    echo "  3. Create virtual environment"
    echo "  4. Install Python dependencies"
    echo "  5. Set up database"
    echo "  6. Configure systemd service"
    echo "  7. Set up nginx (optional)"
    echo "  8. Initialize backup system"
    echo ""
    
    read -p "Continue with setup? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warning "Setup cancelled"
        exit 0
    fi
    
    # Step 1: Update system packages
    header "Step 1: Updating system packages"
    sudo apt update
    
    # Step 2: Install system dependencies
    header "Step 2: Installing system dependencies"
    sudo apt install -y python3 python3-pip python3-venv python3-dev \
                        sqlite3 nginx curl git build-essential \
                        software-properties-common
    
    # Step 3: Create Python virtual environment
    header "Step 3: Setting up Python virtual environment"
    if [ ! -d "venv" ]; then
        log "Creating virtual environment..."
        python3 -m venv venv
    else
        log "Virtual environment already exists"
    fi
    
    # Step 4: Install Python dependencies
    header "Step 4: Installing Python dependencies"
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    
    # Step 4.5: Create .env file with defaults
    header "Step 4.5: Creating environment configuration"
    if [ ! -f ".env" ]; then
        log "Creating .env file with default configuration..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log "Copied .env.example to .env"
            echo ""
            warning "IMPORTANT: You must edit .env to add your Anthropic API key!"
            echo "  1. Get your API key from: https://console.anthropic.com/"
            echo "  2. Edit .env file: nano .env"
            echo "  3. Replace 'your_anthropic_api_key_here' with your actual key"
            echo ""
        else
            # Create minimal .env if .env.example doesn't exist
            cat > .env << 'EOF'
# ThyWill Environment Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here
# DATABASE_PATH=thywill.db  # Optional: specify custom database path
JWT_SECRET=changeme
MULTI_DEVICE_AUTH_ENABLED=true
REQUIRE_APPROVAL_FOR_EXISTING_USERS=true
PEER_APPROVAL_COUNT=2
REQUIRE_VERIFICATION_CODE=false
INVITE_TOKEN_EXPIRATION_HOURS=12
REQUIRE_INVITE_LOGIN_VERIFICATION=false
SESSION_DAYS=90
TEXT_ARCHIVE_ENABLED=true
TEXT_ARCHIVE_BASE_DIR=./text_archives
TEXT_ARCHIVE_COMPRESSION_AFTER_DAYS=365
PRAYER_MODE_ENABLED=true
PAYPAL_USERNAME=
VENMO_HANDLE=
EXPORT_RATE_LIMIT_MINUTES=2
EXPORT_CACHE_TTL_MINUTES=15
ENVIRONMENT=development
PORT=8000
BASE_URL=http://127.0.0.1:8000
INIT_DATABASE=false
FORCE_YES=false
EOF
            log "Created minimal .env file"
            echo ""
            warning "IMPORTANT: You must edit .env to add your Anthropic API key!"
            echo "  1. Get your API key from: https://console.anthropic.com/"
            echo "  2. Edit .env file: nano .env"
            echo "  3. Replace 'your_anthropic_api_key_here' with your actual key"
            echo ""
        fi
    else
        log ".env file already exists"
    fi
    
    # Step 5: Initialize database
    header "Step 5: Setting up database"
    if [ ! -f "thywill.db" ]; then
        log "Creating database..."
        python -c "
from models import create_db_and_tables
create_db_and_tables()
print('Database created successfully')
"
    else
        log "Database already exists"
    fi
    
    # Step 6: Set up production user (if we're setting up for production)
    if [ "$USER" != "thywill" ] && [ "$PWD" != "/home/thywill/thywill" ]; then
        header "Step 6: Development setup complete!"
        success "Development environment ready!"
        echo ""
        echo "Next steps:"
        echo "  thywill start          # Start development server"
        echo "  thywill install        # Install CLI globally"
        echo ""
        echo "For production setup on this server:"
        echo "  sudo adduser thywill"
        echo "  sudo cp -r . /home/thywill/thywill"
        echo "  sudo chown -R thywill:thywill /home/thywill/thywill"
        echo "  thywill setup-production"
    else
        header "Step 6: Setting up production environment"
        cmd_setup_production
    fi
}

cmd_setup_production() {
    header "Production Environment Setup"
    
    # Create required directories
    log "Creating directories..."
    sudo mkdir -p /home/thywill/backups/{hourly,daily,weekly}
    sudo mkdir -p /home/thywill/deploy_logs
    sudo mkdir -p /home/thywill/logs
    sudo chown -R thywill:thywill /home/thywill/
    
    # Set up systemd service
    log "Setting up systemd service..."
    sudo cp deployment/thywill.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable thywill
    
    # Prompt for nginx setup
    echo ""
    log "Nginx configuration options:"
    echo "1) Domain-based (recommended for production)"
    echo "2) IP-only access"
    echo "3) Skip nginx setup"
    read -p "Choose option (1-3): " nginx_choice
    
    case $nginx_choice in
        1)
            read -p "Enter your domain name: " domain_name
            if [ -n "$domain_name" ]; then
                sed "s/your-domain.com/$domain_name/g" deployment/nginx-domain.conf > /tmp/thywill-nginx.conf
                sudo cp /tmp/thywill-nginx.conf /etc/nginx/sites-available/thywill
                sudo ln -sf /etc/nginx/sites-available/thywill /etc/nginx/sites-enabled/
                sudo nginx -t && sudo systemctl reload nginx
                success "Nginx configured for domain: $domain_name"
            fi
            ;;
        2)
            sudo cp deployment/nginx-ip-only.conf /etc/nginx/sites-available/thywill
            sudo ln -sf /etc/nginx/sites-available/thywill /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
            success "Nginx configured for IP access"
            ;;
        3)
            log "Skipping nginx setup"
            ;;
    esac
    
    # Set up environment file
    if [ ! -f ".env" ]; then
        log "Creating environment file..."
        cp deployment/sample.env .env
        warning "Please edit .env file with your actual values"
    fi
    
    # Set up automated backups
    log "Setting up automated backups..."
    if ! crontab -l 2>/dev/null | grep -q "thywill"; then
        log "Adding crontab entries..."
        (crontab -l 2>/dev/null; cat deployment/crontab_backups.txt) | crontab -
        success "Automated backups configured"
    else
        log "Backup crontab already configured"
    fi
    
    # Start service
    log "Starting ThyWill service..."
    sudo systemctl start thywill
    
    # Final verification
    sleep 3
    if systemctl is-active --quiet thywill; then
        success "ThyWill service is running!"
        if curl -s http://127.0.0.1:8000/health > /dev/null 2>&1; then
            success "Health check passed!"
        else
            warning "Service running but health check failed - check logs"
        fi
    else
        error "Service failed to start - check logs"
        echo "Run: journalctl -u thywill -n 20"
    fi
    
    echo ""
    success "Production setup complete!"
    echo ""
    echo "Service status: $(systemctl is-active thywill)"
    echo "View logs: thywill logs"
    echo "Check health: thywill health"
    echo "Create backup: thywill backup"
}

cmd_init() {
    header "Initializing ThyWill Project Environment"
    
    log "Creating required directories in project..."
    mkdir -p "$BACKUP_DIR"/{hourly,daily,weekly}
    mkdir -p "$APP_DIR"/logs
    mkdir -p "$APP_DIR"/text_archives
    
    log "Making scripts executable..."
    if [ -d "$DEPLOYMENT_DIR" ]; then
        chmod +x "$DEPLOYMENT_DIR"/*.sh 2>/dev/null || true
        chmod +x "$DEPLOYMENT_DIR"/*.py 2>/dev/null || true
    fi
    
    log "Creating .env file if needed..."
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log "Copied .env.example to .env"
        else
            # Create minimal .env
            cat > .env << 'EOF'
# ThyWill Environment Configuration
ANTHROPIC_API_KEY=your_anthropic_api_key_here
# DATABASE_PATH=thywill.db  # Optional: specify custom database path
JWT_SECRET=changeme
MULTI_DEVICE_AUTH_ENABLED=true
REQUIRE_APPROVAL_FOR_EXISTING_USERS=true
PEER_APPROVAL_COUNT=2
REQUIRE_VERIFICATION_CODE=false
INVITE_TOKEN_EXPIRATION_HOURS=12
REQUIRE_INVITE_LOGIN_VERIFICATION=false
SESSION_DAYS=90
TEXT_ARCHIVE_ENABLED=true
TEXT_ARCHIVE_BASE_DIR=./text_archives
TEXT_ARCHIVE_COMPRESSION_AFTER_DAYS=365
PRAYER_MODE_ENABLED=true
PAYPAL_USERNAME=
VENMO_HANDLE=
EXPORT_RATE_LIMIT_MINUTES=2
EXPORT_CACHE_TTL_MINUTES=15
ENVIRONMENT=development
PORT=8000
BASE_URL=http://127.0.0.1:8000
INIT_DATABASE=false
FORCE_YES=false
EOF
            log "Created minimal .env file"
        fi
        echo ""
        warning "IMPORTANT: You must edit .env to add your Anthropic API key!"
        echo "  1. Get your API key from: https://console.anthropic.com/"
        echo "  2. Edit .env file: nano .env"
        echo "  3. Replace 'your_anthropic_api_key_here' with your actual key"
        echo ""
    else
        log ".env file already exists"
    fi
    
    success "ThyWill project environment initialized!"
    echo ""
    echo "Next steps:"
    echo "1. Edit .env to add your API key"
    echo "2. Initialize database: thywill db init"
    echo "3. Start development: thywill start"
}

cmd_config() {
    header "Current Configuration"
    
    echo ""
    echo "Paths:"
    echo "  Application Directory: $APP_DIR"
    echo "  Backup Directory: $BACKUP_DIR"
    echo "  Deployment Scripts: $DEPLOYMENT_DIR"
    echo ""
    
    echo "Service Status:"
    if systemctl is-active --quiet thywill; then
        echo "  ThyWill Service: RUNNING"
    else
        echo "  ThyWill Service: STOPPED"
    fi
    
    echo ""
    echo "Available Scripts:"
    ls -la "$DEPLOYMENT_DIR"/*.sh "$DEPLOYMENT_DIR"/*.py 2>/dev/null | while read -r line; do
        echo "  $line"
    done
    
    echo ""
    echo "Backup Statistics:"
    if [ -d "$BACKUP_DIR" ]; then
        echo "  Hourly backups: $(find $BACKUP_DIR/hourly -name "*.db" 2>/dev/null | wc -l)"
        echo "  Daily backups: $(find $BACKUP_DIR/daily -name "*.db" 2>/dev/null | wc -l)"
        echo "  Weekly backups: $(find $BACKUP_DIR/weekly -name "*.db" 2>/dev/null | wc -l)"
        
        local total_size
        total_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo "Unknown")
        echo "  Total backup size: $total_size"
    else
        echo "  Backup directory not found"
    fi
}

cmd_install() {
    header "Installing ThyWill CLI Globally"
    
    local script_path="$SCRIPT_DIR/thywill"
    local install_path="/usr/local/bin/thywill"
    
    if [ ! -f "$script_path" ]; then
        error "ThyWill CLI script not found at: $script_path"
        exit 1
    fi
    
    log "Installing thywill to $install_path..."
    
    # Create the symlink
    if sudo ln -sf "$script_path" "$install_path"; then
        success "ThyWill CLI installed successfully!"
        echo ""
        echo "You can now use 'thywill' from anywhere (no more ./)"
        echo ""
        echo "Try it out:"
        echo "  thywill help"
        echo "  thywill status"
        echo "  thywill config"
    else
        error "Failed to install ThyWill CLI"
        exit 1
    fi
}

cmd_uninstall() {
    header "Uninstalling ThyWill CLI"
    
    local install_path="/usr/local/bin/thywill"
    
    if [ ! -L "$install_path" ] && [ ! -f "$install_path" ]; then
        warning "ThyWill CLI is not installed globally"
        echo "Use ./thywill to run from current directory"
        return 0
    fi
    
    log "Removing $install_path..."
    
    if sudo rm -f "$install_path"; then
        success "ThyWill CLI uninstalled successfully!"
        echo ""
        echo "You'll need to use './thywill' to run from the project directory"
    else
        error "Failed to uninstall ThyWill CLI"
        exit 1
    fi
}

# Duplicate user management commands
cmd_check_duplicates() {
    # Use Python CLI module for duplicate checking
    run_python -m app_helpers.cli.user_management check
}

cmd_merge_duplicates() {
    # Use Python CLI module for duplicate merging
    run_python -m app_helpers.cli.user_management merge
}

cmd_update_env() {
    header "Update Environment Defaults"
    
    # Check if we're in the right directory
    if [ ! -f ".env.example" ]; then
        error ".env.example not found in current directory"
        echo "Please run this command from your ThyWill project directory"
        exit 1
    fi
    
    log "Updating .env file with missing defaults from .env.example..."
    
    # Use the update_env_defaults.py script with all passed arguments
    run_python tools/update_env_defaults.py "$@"
}

# Main command dispatcher
main() {
    local command="${1:-help}"
    shift || true
    
    case "$command" in
        # Development commands
        start)
            cmd_start "$@"
            ;;
        
        # Deployment commands
        deploy)
            cmd_deploy "$@"
            ;;
        rollback)
            cmd_rollback "$@"
            ;;
        health)
            cmd_health "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        
        # Backup commands
        backup)
            cmd_backup "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        restore)
            cmd_restore "$@"
            ;;
        cleanup)
            cmd_cleanup "$@"
            ;;
        verify)
            cmd_verify "$@"
            ;;
        
        # Admin commands
        admin)
            cmd_admin "$@"
            ;;
        role)
            cmd_role "$@"
            ;;
        auth)
            cmd_auth "$@"
            ;;
        import)
            cmd_import "$@"
            ;;
        validate-archives)
            cmd_validate_archives "$@"
            ;;
        test-recovery)
            cmd_test_recovery "$@"
            ;;
        full-recovery)
            cmd_full_recovery "$@"
            ;;
        repair-archives)
            cmd_repair_archives "$@"
            ;;
        heal-archives)
            cmd_heal_archives "$@"
            ;;
        fix-prayer-content)
            cmd_fix_prayer_content "$@"
            ;;
        sync-users)
            cmd_sync_users "$@"
            ;;
        export-sessions)
            cmd_export_sessions "$@"
            ;;
        export-all)
            cmd_export_all "$@"
            ;;
        import-all)
            cmd_import_all "$@"
            ;;
        sync-archives)
            cmd_sync_archives "$@"
            ;;
        recovery-report)
            cmd_recovery_report "$@"
            ;;
        analyze-orphaned-prayers)
            cmd_analyze_orphaned_prayers "$@"
            ;;
        heal-orphaned-prayers)
            cmd_heal_orphaned_prayers "$@"
            ;;
        reconstruct-from-archives)
            cmd_reconstruct_from_archives "$@"
            ;;
        validate-consistency)
            cmd_validate_consistency "$@"
            ;;
        validate-schema)
            cmd_validate_schema "$@"
            ;;
        deduplicate-user-attributes)
            cmd_deduplicate_user_attributes "$@"
            ;;
        
        # Database commands
        db)
            cmd_db "$@"
            ;;
        migrate)
            cmd_migrate "$@"
            ;;
        sqlite)
            cmd_sqlite "$@"
            ;;
        
        # Duplicate user management commands
        check-duplicates)
            cmd_check_duplicates "$@"
            ;;
        merge-duplicates)
            cmd_merge_duplicates "$@"
            ;;
        update-env)
            cmd_update_env "$@"
            ;;
        
        # Utility commands
        setup)
            cmd_setup "$@"
            ;;
        init)
            cmd_init "$@"
            ;;
        install)
            cmd_install "$@"
            ;;
        uninstall)
            cmd_uninstall "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        version|--version|-v)
            show_version
            ;;
        
        *)
            error "Unknown command: $command"
            echo ""
            echo "Use 'thywill help' to see available commands"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"