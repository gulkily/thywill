#!/usr/bin/env python3
"""
ThyWill Management CLI

Unified command-line interface for ThyWill database operations including:
- Database initialization and management
- Backup and restore operations  
- Community data import/export
- Safe server startup
- Migration utilities
"""

import sys
import os
import subprocess
from pathlib import Path

def show_help():
    """Display help information"""
    print("""
üôè ThyWill Management CLI
========================

USAGE:
    thywill <command> [options]

COMMANDS:
    Database Operations:
        init                    Initialize database tables
        backup                  Create database backup
        restore <backup_file>   Restore from backup
        status                  Show database status

    Import/Export:
        import <export_file.zip>    Import community data from ZIP export
        import <file> --dry-run     Preview import without changes
        import <file> --overwrite   Import and overwrite existing data
        export                      Create community export (requires running server)

    Server Management:
        start                   Start server with protection
        test                    Run test suite

    Migration:
        migrate                 Run database migrations
        migrate --dry-run       Preview migration changes

    Help:
        help                    Show this help message
        version                 Show version information

EXAMPLES:
    thywill init                                    # Initialize database
    thywill backup                                  # Create backup
    thywill import community_export_2024-12-06.zip # Import data
    thywill import export.zip --dry-run            # Preview import
    thywill start                                   # Start server safely
    thywill test                                    # Run tests

SAFETY FEATURES:
    ‚Ä¢ Automatic backups before destructive operations
    ‚Ä¢ Dry-run mode for previewing changes
    ‚Ä¢ User confirmation for dangerous operations
    ‚Ä¢ Production database protection
    ‚Ä¢ Comprehensive error handling

For more information, visit: https://github.com/your-org/thywill
""")

def run_command(cmd: list, description: str = None):
    """Run a command and handle errors"""
    if description:
        print(f"üîÑ {description}...")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {e}")
        if e.stderr:
            print(f"Details: {e.stderr}")
        return False
    except FileNotFoundError:
        print(f"‚ùå Command not found: {' '.join(cmd)}")
        print("Make sure you're in the ThyWill directory and all dependencies are installed.")
        return False

def check_file_exists(file_path: str, description: str = "File") -> bool:
    """Check if a file exists and show error if not"""
    if not Path(file_path).exists():
        print(f"‚ùå {description} not found: {file_path}")
        return False
    return True

def main():
    """Main CLI interface"""
    if len(sys.argv) < 2:
        show_help()
        sys.exit(1)
    
    command = sys.argv[1].lower()
    args = sys.argv[2:]
    
    # Change to script directory to ensure relative paths work
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    print("üôè ThyWill Management CLI")
    print("=" * 30)
    
    if command in ['help', '--help', '-h']:
        show_help()
    
    elif command == 'version':
        print("ThyWill CLI v1.0")
        print("Database protection and management utilities")
    
    elif command == 'init':
        print("üèóÔ∏è  Initializing database...")
        if not run_command(['python', 'init_database.py'], "Initialize database tables"):
            sys.exit(1)
    
    elif command == 'backup':
        if not run_command(['python', 'backup_database.py', 'create'], "Create database backup"):
            sys.exit(1)
    
    elif command == 'restore':
        if not args:
            print("‚ùå Please specify backup file to restore from")
            print("Usage: thywill restore <backup_file.db>")
            print("Use 'thywill backup list' to see available backups")
            sys.exit(1)
        
        backup_file = args[0]
        if not check_file_exists(f"backups/{backup_file}", "Backup file"):
            sys.exit(1)
        
        if not run_command(['python', 'backup_database.py', 'restore', backup_file], f"Restore from {backup_file}"):
            sys.exit(1)
    
    elif command == 'import':
        if not args:
            print("‚ùå Please specify export file to import")
            print("Usage: thywill import <export_file.zip> [--dry-run] [--overwrite]")
            sys.exit(1)
        
        export_file = args[0]
        if not check_file_exists(export_file, "Export file"):
            sys.exit(1)
        
        # Pass through all arguments to import script
        import_args = ['python', 'import_community_data.py'] + args
        if not run_command(import_args, f"Import community data from {export_file}"):
            sys.exit(1)
    
    elif command == 'export':
        print("üì§ Community export requires a running server.")
        print("Start the server with 'thywill start' then visit:")
        print("  http://localhost:8000/export")
        print("Or use the API endpoint:")
        print("  curl -O http://localhost:8000/export/database")
    
    elif command == 'start':
        if not run_command(['python', 'safe_start.py'], "Start ThyWill server with protection"):
            sys.exit(1)
    
    elif command == 'test':
        if not run_command(['python', '-m', 'pytest'], "Run test suite"):
            sys.exit(1)
    
    elif command == 'migrate':
        dry_run = '--dry-run' in args
        
        if dry_run:
            print("üîç DRY RUN - Migration preview mode")
        
        # List available migration scripts
        migration_scripts = [
            'migrate_to_attributes.py',
            'migrate_religious_preferences.py', 
            'migrate_to_roles.py',
            'migrate_invite_tree_recovery.py'
        ]
        
        available_migrations = [script for script in migration_scripts if Path(script).exists()]
        
        if not available_migrations:
            print("‚úÖ No migrations found")
            return
        
        print(f"üìã Found {len(available_migrations)} migration script(s):")
        for script in available_migrations:
            print(f"   ‚Ä¢ {script}")
        
        if dry_run:
            print("üîç In dry-run mode - would execute these migrations")
        else:
            print("\n‚ö†Ô∏è  WARNING: Migrations will modify your database")
            response = input("Continue? (yes/no): ")
            if response.lower() != 'yes':
                print("‚ùå Migration cancelled")
                return
            
            for script in available_migrations:
                run_command(['python', script], f"Run migration: {script}")
    
    elif command == 'status':
        print("üìä Database Status")
        print("-" * 20)
        
        # Check if database exists
        db_path = Path("thywill.db")
        if db_path.exists():
            size_mb = db_path.stat().st_size / (1024 * 1024)
            print(f"Database file: ‚úÖ {db_path} ({size_mb:.1f} MB)")
            
            # Try to connect and get basic stats
            try:
                cmd = ['python', '-c', '''
import sqlite3
conn = sqlite3.connect("thywill.db")
cursor = conn.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
tables = cursor.fetchall()
print(f"Tables: {len(tables)}")
for table_name, in tables:
    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    count = cursor.fetchone()[0]
    print(f"  {table_name}: {count:,} records")
conn.close()
''']
                subprocess.run(cmd, check=True)
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not read database stats: {e}")
        else:
            print("Database file: ‚ùå Not found")
            print("Use 'thywill init' to initialize the database")
        
        # Check backup status
        backup_dir = Path("backups")
        if backup_dir.exists():
            backups = list(backup_dir.glob("thywill_backup_*.db"))
            print(f"Backups: {len(backups)} available")
            if backups:
                latest = max(backups, key=lambda p: p.stat().st_mtime)
                print(f"  Latest: {latest.name}")
        else:
            print("Backups: No backup directory found")
    
    elif command in ['list', 'ls'] and args and args[0] == 'backups':
        run_command(['python', 'backup_database.py', 'list'], "List available backups")
    
    else:
        print(f"‚ùå Unknown command: {command}")
        print("Use 'thywill help' to see available commands")
        sys.exit(1)
    
    print("‚úÖ Done!")

if __name__ == "__main__":
    main()